{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "051d60ce-5c00-4495-9567-103698582c0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from symbulate import *\n",
    "#'exec(%matplotlib inline)' \n",
    "import matplotlib\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "06955704-b1f4-49d2-9db4-ac61676a926e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# clear the plot space:\n",
    "plt.clf()\n",
    "# Define the probability type of function as uniform (probability space)\n",
    "P = Uniform(0,40)\n",
    "# Define X as a random variable of the type P (uniform)\n",
    "X =RV(P)\n",
    "# Simulate the values of X and save the in the x array: \n",
    "x=X.sim(10000)\n",
    "x.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62d6b8fb-b22a-4c25-94f1-cb4d7c9a9f26",
   "metadata": {},
   "source": [
    "# CHALLENGE\n",
    "1. CALCULATE THE MEAN AND STANDARD DEVIATION OF THIS SIMULATED UNIFORM x VARIABLE. HOW CLOSE WERE THESE MEAN AND STANDARD DEVIATION FROM THE THEORETICAL MEAN AND STANDARD DEVIATION?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "484d299a-f271-4b5c-9442-8f1f16d39c9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.581071793474564 20.018844346745713\n"
     ]
    }
   ],
   "source": [
    "x_std = x.std()\n",
    "x_mu = x.mean()\n",
    "\n",
    "print(x_std, x_mu)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c351cbed-4e3a-41de-862b-42ac11619158",
   "metadata": {},
   "source": [
    "The theoretical mean and standard deviation are calculated as follows:\n",
    "$$\n",
    "\\text{E}(x) = \\frac{a + b}{2}, \\sigma(x) = \\sqrt{\\frac{(b - a)^2}{12}}\n",
    "$$\n",
    "where $a$ is the lower bound and $b$ is the upper bound of our distribution.\n",
    "\n",
    "Because $a = 0$ and $b = 40$, the theoretical values are\n",
    "$$\n",
    "\\text{E}(x) = \\frac{0 + 40}{2} = 20, \\sigma(x) = \\sqrt{\\frac{(40 - 0)^2}{12}} \\approx 11.54\n",
    "$$\n",
    "\n",
    "Therefore, tt can be concluded that the theoretical values are very close to the simulated values."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef519e2-f019-4056-8c63-3975e29a69b4",
   "metadata": {},
   "source": [
    "2. INTERPRET THE ABOVE HISTOGRAM. WHAT DO YOU SEE? EXPLAIN WITH YOUR WORDS.\n",
    "\n",
    "The above histogram roughly represents a uniform probability distribution, which is characterized by its rectangular shape.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9e800e2a-d9fc-4726-ac74-5b793e8406a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the probability space as a vector of 25 uniform random numbers:\n",
    "P = Uniform(0,40) ** 25\n",
    "# Define XVECTOR as a vector of random variables with 25 random values \n",
    "XVECTOR =RV(P)\n",
    "# Simulate 10,000 vectors to get a matrix  \n",
    "xmatrix=XVECTOR.sim(10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1016cb81-cca0-49a0-bcf1-3d0934fea225",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <table>\n",
       "      <thead>\n",
       "        <th width=\"10%\">Index</th>\n",
       "        <th width=\"90%\">Result</th>\n",
       "      </thead>\n",
       "      <tbody>\n",
       "        \n",
       "        <tr>\n",
       "          <td>0</td><td>(33.17056185436942, 16.914290947817292, 3.2927846261607074, 20.22897481098324, 30.91651516669892, .....</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>1</td><td>(4.024777445528365, 32.32824063009292, 33.17393531971899, 25.433367881817304, 25.232029300319986, .....</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>2</td><td>(23.359820786764832, 14.801038965437776, 9.56235445477311, 32.639898323080374, 22.404663877202697, ....</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>3</td><td>(22.679746219725438, 28.800941392672232, 8.134301709001779, 14.349977347571574, 19.56807628351556, ....</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>4</td><td>(38.553860446310765, 26.952908413209677, 31.081179237112288, 14.205773239522888, 37.6608466029081, ....</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>5</td><td>(31.659708671445095, 4.330707590159157, 33.06504977172592, 18.08040884301446, 10.58376083558031, ......</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>6</td><td>(19.961891275936065, 37.07002396088361, 36.54779140348231, 17.63903248012909, 15.54695951370011, ......</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>7</td><td>(38.23782490712621, 29.687380303979868, 22.842396858378862, 27.604563629675795, 36.91271736316193, ....</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>8</td><td>(15.789137158276393, 22.353687231434144, 2.3838414953014375, 30.550691302996444, 12.067642171128782,...</td>\n",
       "        </tr>\n",
       "        <tr><td>...</td><td>...</td></tr>\n",
       "        <tr>\n",
       "          <td>9999</td><td>(0.3217654795307112, 35.6064714060408, 22.120507592141706, 17.54969731349682, 3.3706785949974583, .....</td>\n",
       "        </tr>\n",
       "        \n",
       "      </tbody>\n",
       "    </table>\n",
       "        "
      ],
      "text/plain": [
       "Index Result\n",
       "0     (33.17056185436942, 16.914290947817292, 3.2927846261607074, 20.22897481098324, 30.91651516669892, ..., 6.408060993749087)\n",
       "1     (4.024777445528365, 32.32824063009292, 33.17393531971899, 25.433367881817304, 25.232029300319986, ..., 31.89987987911472)\n",
       "2     (23.359820786764832, 14.801038965437776, 9.56235445477311, 32.639898323080374, 22.404663877202697, ..., 34.505728923341614)\n",
       "3     (22.679746219725438, 28.800941392672232, 8.134301709001779, 14.349977347571574, 19.56807628351556, ..., 1.202305684903795)\n",
       "4     (38.553860446310765, 26.952908413209677, 31.081179237112288, 14.205773239522888, 37.6608466029081, ..., 10.119088110468141)\n",
       "5     (31.659708671445095, 4.330707590159157, 33.06504977172592, 18.08040884301446, 10.58376083558031, ..., 18.15226082764667)\n",
       "6     (19.961891275936065, 37.07002396088361, 36.54779140348231, 17.63903248012909, 15.54695951370011, ..., 24.666966234994128)\n",
       "7     (38.23782490712621, 29.687380303979868, 22.842396858378862, 27.604563629675795, 36.91271736316193, ..., 14.370870826402978)\n",
       "8     (15.789137158276393, 22.353687231434144, 2.3838414953014375, 30.550691302996444, 12.067642171128782, ..., 1.79578211152569)\n",
       "....  .........................................................................................................................\n",
       "9999  (0.3217654795307112, 35.6064714060408, 22.120507592141706, 17.54969731349682, 3.3706785949974583, ..., 6.866578484818779)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xmatrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9c28b000-abde-41d7-ba1d-9b63fa300a26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <table>\n",
       "      <thead>\n",
       "        <th width=\"10%\">Index</th>\n",
       "        <th width=\"90%\">Result</th>\n",
       "      </thead>\n",
       "      <tbody>\n",
       "        \n",
       "        <tr>\n",
       "          <td>0</td><td>22.140117837530852</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>1</td><td>21.147761754288585</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>2</td><td>16.786932423251933</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>3</td><td>16.44333879963579</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>4</td><td>19.856930820222914</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>5</td><td>15.132458513021302</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>6</td><td>21.656309973758496</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>7</td><td>19.76733933187908</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>8</td><td>21.6054481130805</td>\n",
       "        </tr>\n",
       "        <tr><td>...</td><td>...</td></tr>\n",
       "        <tr>\n",
       "          <td>9999</td><td>19.106823533335568</td>\n",
       "        </tr>\n",
       "        \n",
       "      </tbody>\n",
       "    </table>\n",
       "        "
      ],
      "text/plain": [
       "Index Result\n",
       "0     22.140117837530852\n",
       "1     21.147761754288585\n",
       "2     16.786932423251933\n",
       "3     16.44333879963579\n",
       "4     19.856930820222914\n",
       "5     15.132458513021302\n",
       "6     21.656309973758496\n",
       "7     19.76733933187908\n",
       "8     21.6054481130805\n",
       "....  ..................\n",
       "9999  19.106823533335568"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The 2nd parameter is the mathematical operation applied to each row of the random vector\n",
    "# Simulate 10,000 means of each random vector of 25 uniform distributed numbers: \n",
    "xmean = RV(P,mean).sim(10000)\n",
    "xmean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "645d86a7-ac93-4993-bf93-5985b1af60f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.clf()\n",
    "xmean.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad86cc21-cdd8-40a3-8018-f89af22f0dc5",
   "metadata": {},
   "source": [
    "# CHALLENGE\n",
    "\n",
    "1. CALCULATE THE MEAN AND STANDARD DEVIATION OF THE xmean VARIABLE. HOW SIMILAR OR DIFFERENT ARE THESE VALUES FROM THE MEAN AND STANDARD DEVIATION OF x?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e38d7ca4-02b7-4af1-ad33-7f4647777b97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20.039132652894796 20.018844346745713\n",
      "2.279476949788704 11.581071793474564\n"
     ]
    }
   ],
   "source": [
    "xmean_mu = xmean.mean()\n",
    "xmean_std = xmean.std()\n",
    "\n",
    "print(xmean_mu, x_mu)\n",
    "print(xmean_std, x_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51b35aa7-b162-4c5f-98a2-6e12e62b0ad5",
   "metadata": {},
   "source": [
    "The values from the mean are very similar but the values from the standard deviation differ by a factor of five."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ec8f6b5-7e90-4042-ae21-494e1489a08b",
   "metadata": {},
   "source": [
    "2. WHAT DO YOU SEE IN THE ABOVE HISTOGRAM? DOES THE HISTOGRAM OF SAMPLE MEANS OF UNIFORM RANDOM VARIABLE LOOK LIKE A UNIFORM DISTRIBUTED VARIABLE? DO YOU SEE A LOGIC? BRIEFLY EXPLAIN WHAT YOU THINK.\n",
    "\n",
    "Since the shape of this distribution is not rectangular, then it can be concluded that it is not a uniform probability distribution. It would be a unirform probability distribution if and only if all values within the distribution had the same probability, which is what gives the rectangular shape to such distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c931f05a-61b6-46bc-94db-20f2229f57a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.clf()\n",
    "xmean.plot()\n",
    "x.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b739a1e-9583-40bc-baad-1684377a0eb1",
   "metadata": {},
   "source": [
    "3. WHAT DO YOU SEE? HOW THE HISTOGRAM OF X DIFFERS FROM THE HISTOGRAM OF THE SAMPLES OF X?\n",
    "\n",
    "The most obvious difference is the shape of the distribution, from which it can be concluded that the orange one is a uniform probability distribution while the blue one appears to be a normal distribution.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1732708b-c503-4fa3-adbd-c6bde4b29006",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# clear the plot space:\n",
    "plt.clf()\n",
    "# Define the probability type of function as uniform (probability space)\n",
    "P = Normal(mean=20, sd=10)\n",
    "# Define Y as a random variable of the type P (normal)\n",
    "Y =RV(P)\n",
    "# Simulate 10,000 values of Y and save the in the x array: \n",
    "y=Y.sim(10000)\n",
    "y.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2cc90c9-915e-4e86-b91d-2d6fbd398ddb",
   "metadata": {},
   "source": [
    "# CHALLENGE\n",
    "\n",
    "1. CALCULATE THE MEAN AND STANDARD DEVIATION OF THIS RANDOM y VARIABLE. HOW SIMILAR OR DIFFERENT ARE THESE VALUES FROM THE MEAN AND STANDARD DEVIATION OF THE THEORETICAL MEAN (20) AND THE THEORETICAL STANDARD DEVIATION (10)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d14d3a9a-dfe5-401d-9efb-a18c90e4a822",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20.136964858821894 10.012835535652686\n"
     ]
    }
   ],
   "source": [
    "y_mu = y.mean()\n",
    "y_std = y.std()\n",
    "\n",
    "print(y_mu, y_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6821c2d4-d442-42a4-88f7-b966af01b7f2",
   "metadata": {},
   "source": [
    "The values are really close to the theoretical values.\n",
    "\n",
    "2. WHAT DO YOU SEE? INTERPRET THE HISTOGRAM WITH YOUR WORDS.\n",
    "\n",
    "What I see is that the histogram represents a normal distribution with $\\mu = 20$ and $\\sigma = 10$. It must have $\\mu = 20$ because most values are centered towards 20.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ab9f2413-72e0-4a17-9aed-ad413e0a8abd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the probability space P as a vector of 25 normal random numbers:\n",
    "P = Normal(mean=20, sd=10) ** 25\n",
    "# Define RANDOMVECTOR as a vector of 25 random variables in the Probability space P \n",
    "RANDOMVECTOR = RV(P)\n",
    "# Simulate 10,000 random vectors with this distribution and save the in ymatrix: \n",
    "ymatrix=RANDOMVECTOR.sim(10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7e0ae922-9ccb-403d-b597-3eadd5a5b126",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <table>\n",
       "      <thead>\n",
       "        <th width=\"10%\">Index</th>\n",
       "        <th width=\"90%\">Result</th>\n",
       "      </thead>\n",
       "      <tbody>\n",
       "        \n",
       "        <tr>\n",
       "          <td>0</td><td>(28.138707610138887, 22.476109071009965, 41.0692154612947, 21.363352147925493, 43.80619076701926, .....</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>1</td><td>(31.979357030511544, 31.333734019493406, 33.452363076981825, 23.005859017928636, 22.498238486814337,...</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>2</td><td>(0.9773592080863338, 9.84190067394411, 12.92495667475675, 24.90370037241773, 23.09266612729767, ...,...</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>3</td><td>(26.611453932740105, 4.624281613479042, 25.566245064657497, 22.266349015569553, 19.897380559482826, ...</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>4</td><td>(25.547512021915747, -3.0452075317885843, 24.019491415227975, 16.200492448721047, 19.802586940027354...</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>5</td><td>(20.651231918954167, 18.761532561140218, 23.003706198764014, 40.21546890548129, 15.424411596186811, ...</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>6</td><td>(27.640080688866227, 17.54079414217619, 26.838446647388725, 11.940686686215848, 17.966491815969505, ...</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>7</td><td>(35.103331739441046, 17.332672566008956, 10.053602320279998, 38.98780617392356, -0.37914925773115016...</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>8</td><td>(7.612874484410057, 18.529350816158765, 27.534128020850915, 6.118210506670225, 19.870377889378506, ....</td>\n",
       "        </tr>\n",
       "        <tr><td>...</td><td>...</td></tr>\n",
       "        <tr>\n",
       "          <td>9999</td><td>(20.650056472159832, -0.9996929799900123, 11.661195544766372, 21.963325603921334, 15.449762739745214...</td>\n",
       "        </tr>\n",
       "        \n",
       "      </tbody>\n",
       "    </table>\n",
       "        "
      ],
      "text/plain": [
       "Index Result\n",
       "0     (28.138707610138887, 22.476109071009965, 41.0692154612947, 21.363352147925493, 43.80619076701926, ..., 12.72076464843964)\n",
       "1     (31.979357030511544, 31.333734019493406, 33.452363076981825, 23.005859017928636, 22.498238486814337, ..., 5.810651681365249)\n",
       "2     (0.9773592080863338, 9.84190067394411, 12.92495667475675, 24.90370037241773, 23.09266612729767, ..., 22.267757981592418)\n",
       "3     (26.611453932740105, 4.624281613479042, 25.566245064657497, 22.266349015569553, 19.897380559482826, ..., 28.09618650248806)\n",
       "4     (25.547512021915747, -3.0452075317885843, 24.019491415227975, 16.200492448721047, 19.802586940027354, ..., 8.747389760389652)\n",
       "5     (20.651231918954167, 18.761532561140218, 23.003706198764014, 40.21546890548129, 15.424411596186811, ..., 34.582612714080895)\n",
       "6     (27.640080688866227, 17.54079414217619, 26.838446647388725, 11.940686686215848, 17.966491815969505, ..., 23.067411098429034)\n",
       "7     (35.103331739441046, 17.332672566008956, 10.053602320279998, 38.98780617392356, -0.37914925773115016, ..., -5.7377336999588735)\n",
       "8     (7.612874484410057, 18.529350816158765, 27.534128020850915, 6.118210506670225, 19.870377889378506, ..., 20.6983766639239)\n",
       "....  .............................................................................................................................\n",
       "9999  (20.650056472159832, -0.9996929799900123, 11.661195544766372, 21.963325603921334, 15.449762739745214, ..., 6.151623182337673)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ymatrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "706a7f7f-fcb7-4b9b-ba7f-c43b980d4cb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <table>\n",
       "      <thead>\n",
       "        <th width=\"10%\">Index</th>\n",
       "        <th width=\"90%\">Result</th>\n",
       "      </thead>\n",
       "      <tbody>\n",
       "        \n",
       "        <tr>\n",
       "          <td>0</td><td>22.02473693953173</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>1</td><td>19.20085396385214</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>2</td><td>16.111386733718753</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>3</td><td>22.883501152833954</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>4</td><td>23.50767442383423</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>5</td><td>18.456673821446998</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>6</td><td>20.115895976541804</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>7</td><td>18.102135096544444</td>\n",
       "        </tr>\n",
       "        \n",
       "        <tr>\n",
       "          <td>8</td><td>20.420627646082895</td>\n",
       "        </tr>\n",
       "        <tr><td>...</td><td>...</td></tr>\n",
       "        <tr>\n",
       "          <td>9999</td><td>19.312102884274175</td>\n",
       "        </tr>\n",
       "        \n",
       "      </tbody>\n",
       "    </table>\n",
       "        "
      ],
      "text/plain": [
       "Index Result\n",
       "0     22.02473693953173\n",
       "1     19.20085396385214\n",
       "2     16.111386733718753\n",
       "3     22.883501152833954\n",
       "4     23.50767442383423\n",
       "5     18.456673821446998\n",
       "6     20.115895976541804\n",
       "7     18.102135096544444\n",
       "8     20.420627646082895\n",
       "....  ..................\n",
       "9999  19.312102884274175"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The 2nd parameter is the mathematical operation applied to each row of the random vector\n",
    "# Simulate 10,000 means of each random vector of 25 uniform distributed numbers: \n",
    "ymean = RV(P,mean).sim(10000)\n",
    "ymean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ccc792fc-ea89-4d72-bbf7-57529beb4293",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY4AAAD4CAYAAAD7CAEUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAYjklEQVR4nO3df7RdZX3n8fenAVI7DiokVppEk5ZQB3UG5RJdozJTnGhsLWGtggZRY4clrZaZEUdr0Ck6qe0SnSVrbBklFhQURcRfmWlYEVSctaYFc0EEAkWuSCWRjhEQnKpo5Dt/nB16OLn35uzk7ntPkvdrrbPu3s+Pne9OsvPN8zz77J2qQpKkYf3SXAcgSdq/mDgkSa2YOCRJrZg4JEmtmDgkSa0cMtcBzIYFCxbU0qVL5zoMSdqv3HjjjT+oqoWD5QdF4li6dCnj4+NzHYYk7VeS/P1k5U5VSZJaMXFIkloxcUiSWuk0cSRZleTOJBNJ1k1S/5Yktye5JcmXkzyjr25tkruaz9q+8uOT3Noc84NJ0uU5SJIer7PEkWQecCHwcuBY4PQkxw40+wYwVlX/ErgKeF/T9wjgXcDzgRXAu5I8penzIeANwPLms6qrc5Ak7a7LEccKYKKq7q6qnwFXAKv7G1TVV6vqx83u9cDiZvtlwDVV9UBVPQhcA6xKchRweFVdX72nM14GnNLhOUiSBnSZOBYB9/btb2vKpnImcPUe+i5qtvd4zCRnJRlPMr5jx46WoUuSpjISi+NJXgOMAe+fqWNW1YaqGquqsYULd/v+iiRpL3WZOLYDS/r2Fzdlj5Pk3wHvBE6uqkf20Hc7/zSdNeUxJUnd6fKb41uA5UmW0fvHfQ3w6v4GSZ4LXASsqqrv91VtBv68b0H8pcC5VfVAkoeTvAC4AXgd8BcdnoO0Vy645ltDtTtn5TEdRyLNvM4SR1XtTHI2vSQwD7ikqrYmWQ+MV9VGelNTTwQ+09xV+92qOrlJEH9KL/kArK+qB5rtNwEfA55Ab03kaiRJsyYHw6tjx8bGymdVaTozPUIY9njDcmSiuZDkxqoaGywficVxSdL+w8QhSWrFxCFJasXEIUlqxcQhSWrFxCFJasXEIUlqxcQhSWrFxCFJasXEIUlqxcQhSWqly6fjSgecmX4GlbQ/csQhSWrFxCFJasXEIUlqxcQhSWrFxCFJaqXTxJFkVZI7k0wkWTdJ/YlJbkqyM8mpfeW/leTmvs9Pk5zS1H0syXf66o7r8hwkSY/X2e24SeYBFwIrgW3AliQbq+r2vmbfBV4PvLW/b1V9FTiuOc4RwATwpb4mb6uqq7qKXZI0tS6/x7ECmKiquwGSXAGsBh5LHFV1T1P36DTHORW4uqp+3F2okqRhdTlVtQi4t29/W1PW1hrgUwNlf5bkliQXJJk/WackZyUZTzK+Y8eOvfhlJUmTGenF8SRHAc8BNvcVnws8EzgBOAJ4+2R9q2pDVY1V1djChQs7j1WSDhZdTlVtB5b07S9uytp4JfD5qvr5roKquq/ZfCTJRxlYH5EORG0edXLOymM6jETqdsSxBVieZFmSw+hNOW1seYzTGZimakYhJAlwCnDbvocqSRpWZ4mjqnYCZ9ObZroDuLKqtiZZn+RkgCQnJNkGnAZclGTrrv5JltIbsXxt4NCXJ7kVuBVYALynq3OQJO2u06fjVtUmYNNA2Xl921voTWFN1vceJllMr6qTZjZKSVIbI704LkkaPSYOSVIrJg5JUismDklSKyYOSVIrJg5JUismDklSKyYOSVIrJg5JUismDklSKyYOSVIrJg5JUismDklSKyYOSVIrnT5WXZprbd6cJ2k4jjgkSa2YOCRJrXSaOJKsSnJnkokk6yapPzHJTUl2Jjl1oO4XSW5uPhv7ypcluaE55qeb95lLkmZJZ4kjyTzgQuDlwLHA6UmOHWj2XeD1wCcnOcRPquq45nNyX/n5wAVVdTTwIHDmjAcvSZpSlyOOFcBEVd1dVT8DrgBW9zeoqnuq6hbg0WEOmCTAScBVTdGlwCkzFrEkaY+6TByLgHv79rc1ZcP65STjSa5PckpTdiTww6rauadjJjmr6T++Y8eOlqFLkqYyyrfjPqOqtif5deArSW4FHhq2c1VtADYAjI2NVUcxStJBp8sRx3ZgSd/+4qZsKFW1vfl5N3Ad8FzgfuDJSXYlvFbHlCTtuy4TxxZgeXMX1GHAGmDjHvoAkOQpSeY32wuAFwK3V1UBXwV23YG1FvjijEcuSZpSZ4mjWYc4G9gM3AFcWVVbk6xPcjJAkhOSbANOAy5KsrXp/i+A8STfpJco3ltVtzd1bwfekmSC3prHxV2dgyRpd52ucVTVJmDTQNl5fdtb6E03Dfb7G+A5Uxzzbnp3bEmS5oDfHJcktWLikCS1YuKQJLVi4pAktWLikCS1YuKQJLVi4pAktWLikCS1YuKQJLVi4pAktTLKj1WXJnXBNd+a6xCkg5ojDklSK444pAPMsCOyc1Ye03EkOlA54pAktWLikCS1YuKQJLVi4pAktdJp4kiyKsmdSSaSrJuk/sQkNyXZmeTUvvLjkvxtkq1Jbknyqr66jyX5TpKbm89xXZ6DJOnxOrurKsk84EJgJbAN2JJkY9+7wwG+C7weeOtA9x8Dr6uqu5L8GnBjks1V9cOm/m1VdVVXsUuSptbl7bgrgInmHeEkuQJYDTyWOKrqnqbu0f6OVfWtvu3vJfk+sBD4YYfxSpKG0OVU1SLg3r79bU1ZK0lWAIcB3+4r/rNmCuuCJPP3LUxJUhsjvTie5Cjg48DvV9WuUcm5wDOBE4AjgLdP0fesJONJxnfs2DEr8UrSwaDLxLEdWNK3v7gpG0qSw4G/Bt5ZVdfvKq+q+6rnEeCj9KbEdlNVG6pqrKrGFi5cuFcnIEnaXZeJYwuwPMmyJIcBa4CNw3Rs2n8euGxwEbwZhZAkwCnAbTMZtCRpep0ljqraCZwNbAbuAK6sqq1J1ic5GSDJCUm2AacBFyXZ2nR/JXAi8PpJbru9PMmtwK3AAuA9XZ2DJGl3nT7ksKo2AZsGys7r295CbwprsN8ngE9MccyTZjhMSVILI704LkkaPUMljiSfS/I7SUw0knSQGzYR/A/g1cBdSd6b5Dc7jEmSNMKGShxVdW1VnQE8D7gHuDbJ3yT5/SSHdhmgJGm0DL04nuRI4DXAa4FvAJcDLwLWAv+2i+Akdcc3BWpvDZU4knwe+E163+L+3aq6r6n6dJLxroKTJI2eYUccH2lurX1MkvlV9UhVjXUQlyRpRA27OD7Zl+z+diYDkSTtH6YdcSR5Gr0n2j4hyXOBNFWHA7/ScWySpBG0p6mql9F70dJi4AN95T8C3tFRTJKkETZt4qiqS4FLk/xeVX12lmKSJI2wPU1VvaZ5btTSJG8ZrK+qD0zSTZJ0ANvTVNU/a34+setAJEn7hz1NVV3U/PyvsxOOJGnUDfuQw/clOTzJoUm+nGRHktd0HZwkafQM+z2Ol1bVw8Ar6D2r6mjgbV0FJUkaXcMmjl1TWr8DfKaqHuooHknSiBv2kSP/K8nfAT8B3phkIfDT7sKSJI2qYR+rvg7418BYVf0c+Edg9Z76JVmV5M4kE0nWTVJ/YpKbkuxMcupA3dokdzWftX3lxye5tTnmB5Nk8LiSpO60eef4M+l9n6O/z2VTNU4yD7gQWAlsA7Yk2VhVt/c1+y69b6a/daDvEcC7gDGggBubvg8CHwLeANxA733mq4CrW5yHJGkfDPtY9Y8DvwHcDPyiKS6mSRzACmCiqu5ujnEFvVHKY4mjqu5p6h4d6Psy4JqqeqCpvwZYleQ64PCqur4pvww4BRPHAWHY90NImlvDjjjGgGOrqlocexFwb9/+NuD5+9B3UfPZNkn5bpKcBZwF8PSnP33IX1aStCfD3lV1G/C0LgOZaVW1oarGqmps4cKFcx2OJB0whh1xLABuT/J14JFdhVV18jR9tgNL+vYXN2XD2M7jX0e7GLiuKV+8l8eUJM2AYRPHu/fi2FuA5UmW0fvHfQ3w6iH7bgb+PMlTmv2XAudW1QNJHk7yAnqL468D/mIvYpMk7aVhb8f9Gr1vjB/abG8BbtpDn53A2fSSwB3AlVW1Ncn6JCcDJDkhyTbgNOCiJFubvg8Af9r8OluA9bsWyoE3AX8FTADfxoVxSZpVw95V9QZ6C81H0Lu7ahHwYeAl0/Vr3lO+aaDsvL7tLTx+6qm/3SXAJZOUjwPPHiZuSdLMG3Zx/I+AFwIPA1TVXcBTuwpKkjS6hk0cj1TVz3btNF8CbHNrriTpADFs4vhakncAT0iyEvgM8D+7C0uSNKqGTRzrgB3ArcAf0Fu3+C9dBSVJGl1DLY5X1aNJvgB8oap2dBuSpFEy7KNgzll5TMeRaFRMO+JIz7uT/AC4E7izefvfedP1kyQduPY0VXUOvbupTqiqI6rqCHrPm3phknM6j06SNHL2lDheC5xeVd/ZVdA87fY19L61LUk6yOwpcRxaVT8YLGzWOQ7tJiRJ0ijbU+L42V7WSZIOUHu6q+pfJXl4kvIAv9xBPJKkETdt4qiqebMViCRp/zDsFwAlSQJMHJKklkwckqRWTBySpFZMHJKkVjpNHElWJbkzyUSSdZPUz0/y6ab+hiRLm/Izktzc93k0yXFN3XXNMXfV+UIpSZpFnSWOJPOAC4GXA8cCpyc5dqDZmcCDVXU0cAFwPkBVXV5Vx1XVcfQee/Kdqrq5r98Zu+qr6vtdnYMkaXddjjhWABNVdXfz9sArgNUDbVYDlzbbVwEvSZKBNqc3fSVJI6DLxLEIuLdvf1tTNmmbqtoJPAQcOdDmVcCnBso+2kxT/ckkiQaAJGclGU8yvmOHrxCRpJky0ovjSZ4P/LiqbusrPqOqngO8uPm8drK+VbWhqsaqamzhwoWzEK0kHRy6TBzbgSV9+4ubsknbJDkEeBJwf1/9GgZGG1W1vfn5I+CT9KbEJEmzpMvEsQVYnmRZksPoJYGNA202Amub7VOBr1RVAST5JeCV9K1vJDkkyYJm+1DgFcBtSJJmzVDvHN8bVbUzydnAZmAecElVbU2yHhivqo3AxcDHk0wAD9BLLrucCNzbvDhql/nA5iZpzAOuBT7S1TlIknbXWeIAqKpNwKaBsvP6tn8KnDZF3+uAFwyU/SNw/IwHqk5dcM235joESTNopBfHJUmjx8QhSWrFxCFJasXEIUlqxcQhSWrFxCFJaqXT23ElHTyGve36nJXHdByJuuaIQ5LUiolDktSKiUOS1IqJQ5LUiolDktSKiUOS1IqJQ5LUiolDktSKiUOS1IqJQ5LUSqeJI8mqJHcmmUiybpL6+Uk+3dTfkGRpU740yU+S3Nx8PtzX5/gktzZ9PpgkXZ6DJOnxOkscSeYBFwIvB44FTk9y7ECzM4EHq+po4ALg/L66b1fVcc3nD/vKPwS8AVjefFZ1dQ6SpN11OeJYAUxU1d1V9TPgCmD1QJvVwKXN9lXAS6YbQSQ5Cji8qq6vqgIuA06Z8cglSVPqMnEsAu7t29/WlE3apqp2Ag8BRzZ1y5J8I8nXkry4r/22PRwTgCRnJRlPMr5jx459OxNJ0mNG9bHq9wFPr6r7kxwPfCHJs9ocoKo2ABsAxsbGqoMYD3rDPkZb0oGlyxHHdmBJ3/7ipmzSNkkOAZ4E3F9Vj1TV/QBVdSPwbeCYpv3iPRxTktShLhPHFmB5kmVJDgPWABsH2mwE1jbbpwJfqapKsrBZXCfJr9NbBL+7qu4DHk7ygmYt5HXAFzs8B0nSgM6mqqpqZ5Kzgc3APOCSqtqaZD0wXlUbgYuBjyeZAB6gl1wATgTWJ/k58Cjwh1X1QFP3JuBjwBOAq5uPJGmWdLrGUVWbgE0DZef1bf8UOG2Sfp8FPjvFMceBZ89spJKkYfnNcUlSKyYOSVIrJg5JUismDklSKyYOSVIrJg5JUismDklSKyYOSVIrJg5JUismDklSK6P6WHXNIR+XLmk6jjgkSa044pA0q4Yd0Z6z8piOI9HecsQhSWrFxCFJasXEIUlqxcQhSWql08SRZFWSO5NMJFk3Sf38JJ9u6m9IsrQpX5nkxiS3Nj9P6utzXXPMm5vPU7s8B0nS43V2V1WSecCFwEpgG7Alycaqur2v2ZnAg1V1dJI1wPnAq4AfAL9bVd9L8mx67y1f1NfvjOYVspKkWdbl7bgrgImquhsgyRXAaqA/cawG3t1sXwX8ZZJU1Tf62mwFnpBkflU90mG8kkaIt+2Ori6nqhYB9/btb+Pxo4bHtamqncBDwJEDbX4PuGkgaXy0mab6kySZ2bAlSdMZ6cXxJM+iN331B33FZ1TVc4AXN5/XTtH3rCTjScZ37NjRfbCSdJDoMnFsB5b07S9uyiZtk+QQ4EnA/c3+YuDzwOuq6tu7OlTV9ubnj4BP0psS201VbaiqsaoaW7hw4YyckCSp28SxBVieZFmSw4A1wMaBNhuBtc32qcBXqqqSPBn4a2BdVf2fXY2THJJkQbN9KPAK4LYOz0GSNKCzxNGsWZxN746oO4Arq2prkvVJTm6aXQwcmWQCeAuw65bds4GjgfMGbrudD2xOcgtwM70Ry0e6OgdJ0u46fchhVW0CNg2Unde3/VPgtEn6vQd4zxSHPX4mY5QktTPSi+OSpNFj4pAkteL7OA4ivtlP0kwwcUjar7X5D5HfMp8ZTlVJkloxcUiSWjFxSJJaMXFIkloxcUiSWjFxSJJa8XbcA4Dfz5A0mxxxSJJaMXFIklpxqkrSQcP3mM8MRxySpFYccYwoF7wljSoThyQNcEprek5VSZJa6XTEkWQV8N+BecBfVdV7B+rnA5fRex3s/cCrquqepu5c4EzgF8B/rKrNwxxzrji1JOlg0VniSDIPuBBYCWwDtiTZWFW39zU7E3iwqo5OsgY4H3hVkmOBNcCzgF8Drk2ya0y4p2NK0qyY6f8w7i9TX12OOFYAE1V1N0CSK4DVQP8/8quBdzfbVwF/mSRN+RVV9QjwnSQTzfEY4pgzypGEpFEz12swXSaORcC9ffvbgOdP1aaqdiZ5CDiyKb9+oO+iZntPxwQgyVnAWc3u/0ty516cQ1cWAD+Y6yD2wBhnhjHOnP0hzn2K8S0zGMg0x2sT4zMmKzxg76qqqg3AhrmOYzJJxqtqbK7jmI4xzgxjnDn7Q5wHS4xd3lW1HVjSt7+4KZu0TZJDgCfRWySfqu8wx5QkdajLxLEFWJ5kWZLD6C12bxxosxFY22yfCnylqqopX5NkfpJlwHLg60MeU5LUoc6mqpo1i7OBzfRunb2kqrYmWQ+MV9VG4GLg483i9wP0EgFNuyvpLXrvBP6oqn4BMNkxuzqHDo3kFNoAY5wZxjhz9oc4D4oY0/sPviRJw/Gb45KkVkwckqRWTBwdS3JJku8nuW2Suv+cpJIsmIvY+uKYNMYk/yHJ3yXZmuR9cxVfE8tuMSY5Lsn1SW5OMp5kxXTHmIUYlyT5apLbm9+z/9SUH5HkmiR3NT+fMoIxvr/5s74lyeeTPHnUYuyrn/PrZroYR+W6mebPet+vm6ry0+EHOBF4HnDbQPkSeov8fw8sGLUYgd8CrgXmN/tPHcEYvwS8vNn+beC6OY7xKOB5zfY/B74FHAu8D1jXlK8Dzh/BGF8KHNKUnz+KMTb7I3HdTPP7ODLXzTQx7vN144ijY1X1v+ndMTboAuCPgTm/O2GKGN8IvLd6j32hqr4/64H1mSLGAg5vtp8EfG9WgxpQVfdV1U3N9o+AO+g98WA1cGnT7FLglDkJkKljrKovVdXOptn19L4jNVIxNtUjcd1ME+PIXDfTxLjP142JYw4kWQ1sr6pvznUs0zgGeHGSG5J8LckJcx3QJN4MvD/JvcB/A86d23D+SZKlwHOBG4Bfrar7mqp/AH51ruLqNxBjv38PXD3rAU2iP8ZRvW4Gfh9H8roZiPHN7ON1Y+KYZUl+BXgHcN5cx7IHhwBHAC8A3gZc2TyAcpS8ETinqpYA59D7XtCcS/JE4LPAm6vq4f666s0PzPkoc6oYk7yT3nenLp+r2PpieSxGejGN3HUzye/jyF03k8S4z9eNiWP2/QawDPhmknvoTQnclORpcxrV7rYBn6uerwOP0ns42ihZC3yu2f4M//QE5TmT5FB6F+nlVbUrtv+b5Kim/ihgTqf9poiRJK8HXgGc0SS4OTNJjCN33Uzx+zhS180UMe7zdWPimGVVdWtVPbWqllbVUnp/0Z5XVf8wx6EN+gK9hT7SexfKYYzek0m/B/ybZvsk4K45jIXmf5YXA3dU1Qf6qvofrbMW+OJsx7bLVDGm94K0PwZOrqofz1V8TSy7xThq1800f9ZfYESum2li3PfrZq5W/A+WD/Ap4D7g5/T+sp85UH8Pc39X1W4x0vsL/wngNuAm4KQRjPFFwI3AN+nN3R4/xzG+iN401C3Azc3nt+m9KuDLzQV6LXDECMY4Qe+VBbvKPjxqMQ60mdPrZprfx5G5bqaJcZ+vGx85IklqxakqSVIrJg5JUismDklSKyYOSVIrJg5JUismDklSKyYOSVIr/x/Hfce5+YK1GwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.clf()\n",
    "ymean.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07a31713-cee1-4fff-84c8-97ef18bd1cce",
   "metadata": {},
   "source": [
    "# CHALLENGE\n",
    "\n",
    "1. CALCULATE THE MEAN AND STANDARD DEVIATION OF THE ymean VARIABLE. HOW SIMILAR OR DIFFERENT ARE THESE VALUES FROM THE MEAN AND STANDARD DEVIATION OF y?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "588aba0a-9e67-4841-af33-8922918323ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20.012548417645274 1.9957225796984397\n",
      "20.136964858821894 10.012835535652686\n"
     ]
    }
   ],
   "source": [
    "ymean_mu = ymean.mean()\n",
    "ymean_std = ymean.std()\n",
    "\n",
    "print(ymean_mu, ymean_std)\n",
    "print(y_mu, y_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d601bd2f-5710-4603-8ddc-ec6e5ed2bfd0",
   "metadata": {},
   "source": [
    "The values from the mean remain roughly equal, while the values from the standard deviation differ by a factor of more than 4."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e452856c-211d-4a13-8962-01667937064e",
   "metadata": {},
   "source": [
    "2. INTERPRET THE ABOVE HISTOGRAM OF THE SAMPLES OF y.\n",
    "\n",
    "It is the histogram of a normal distribution with $\\mu = 20$ and $\\sigma \\approx 2$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "121004aa-c5d3-4224-884b-378abd452f87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.clf()\n",
    "ymean.plot()\n",
    "y.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f46ce80-6dd9-487d-abfb-4970156927ff",
   "metadata": {},
   "source": [
    "3. WHAT DO YOU SEE? COMPARE BOTH HISTOGRAMS. BRIEFLY EXPLAIN WHAT YOU THINK THAT HAPPEND.\n",
    "\n",
    "Because `ymean` has a lower standard deviation, its plot has a lower height and a broader range. Furthermore, its density is more evenly distributed than in the plot of `y`.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91ce5d0c-5a54-4d88-8073-ec965e616792",
   "metadata": {},
   "source": [
    "# CHALLENGE\n",
    "\n",
    "Collect real data for Microsoft (MSFT) stock and do a hypothesis testing to see whether the mean of monthly cc returns of Microsoft is greater than zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b95ab478-ba2a-43f3-b305-a934ffffef3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pandas_datareader as pdr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "24913c1e-20cd-4c38-b4cb-17a1b0916900",
   "metadata": {},
   "outputs": [],
   "source": [
    "MSFT = pdr.get_data_yahoo(\n",
    "    'MSFT',\n",
    "    start = \"08/15/2000\",\n",
    "    end = \"08/15/2022\",\n",
    "    interval=\"m\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "91d76bba-9d00-4b54-a0dd-879508fefa23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-09-01</th>\n",
       "      <td>36.031250</td>\n",
       "      <td>29.312500</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>30.156250</td>\n",
       "      <td>1.425534e+09</td>\n",
       "      <td>18.954859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-10-01</th>\n",
       "      <td>35.062500</td>\n",
       "      <td>24.218750</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>34.437500</td>\n",
       "      <td>2.469416e+09</td>\n",
       "      <td>21.645863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-11-01</th>\n",
       "      <td>36.187500</td>\n",
       "      <td>28.500000</td>\n",
       "      <td>34.250000</td>\n",
       "      <td>28.687500</td>\n",
       "      <td>1.983463e+09</td>\n",
       "      <td>18.031670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-12-01</th>\n",
       "      <td>30.312500</td>\n",
       "      <td>20.156250</td>\n",
       "      <td>29.031250</td>\n",
       "      <td>21.687500</td>\n",
       "      <td>2.056668e+09</td>\n",
       "      <td>13.631783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001-01-01</th>\n",
       "      <td>32.375000</td>\n",
       "      <td>21.437500</td>\n",
       "      <td>22.062500</td>\n",
       "      <td>30.531250</td>\n",
       "      <td>2.005531e+09</td>\n",
       "      <td>19.190571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-01</th>\n",
       "      <td>290.880005</td>\n",
       "      <td>246.440002</td>\n",
       "      <td>277.709991</td>\n",
       "      <td>271.869995</td>\n",
       "      <td>7.429020e+08</td>\n",
       "      <td>271.238251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-01</th>\n",
       "      <td>277.690002</td>\n",
       "      <td>241.509995</td>\n",
       "      <td>275.200012</td>\n",
       "      <td>256.829987</td>\n",
       "      <td>6.213723e+08</td>\n",
       "      <td>256.829987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-01</th>\n",
       "      <td>282.000000</td>\n",
       "      <td>245.940002</td>\n",
       "      <td>256.390015</td>\n",
       "      <td>280.739990</td>\n",
       "      <td>5.348684e+08</td>\n",
       "      <td>280.739990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-01</th>\n",
       "      <td>291.910004</td>\n",
       "      <td>272.380005</td>\n",
       "      <td>277.820007</td>\n",
       "      <td>291.910004</td>\n",
       "      <td>2.121793e+08</td>\n",
       "      <td>291.910004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-15</th>\n",
       "      <td>292.679901</td>\n",
       "      <td>290.130005</td>\n",
       "      <td>291.000000</td>\n",
       "      <td>291.105011</td>\n",
       "      <td>6.295264e+06</td>\n",
       "      <td>291.105011</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>265 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  High         Low        Open       Close        Volume  \\\n",
       "Date                                                                       \n",
       "2000-09-01   36.031250   29.312500   35.000000   30.156250  1.425534e+09   \n",
       "2000-10-01   35.062500   24.218750   30.250000   34.437500  2.469416e+09   \n",
       "2000-11-01   36.187500   28.500000   34.250000   28.687500  1.983463e+09   \n",
       "2000-12-01   30.312500   20.156250   29.031250   21.687500  2.056668e+09   \n",
       "2001-01-01   32.375000   21.437500   22.062500   30.531250  2.005531e+09   \n",
       "...                ...         ...         ...         ...           ...   \n",
       "2022-05-01  290.880005  246.440002  277.709991  271.869995  7.429020e+08   \n",
       "2022-06-01  277.690002  241.509995  275.200012  256.829987  6.213723e+08   \n",
       "2022-07-01  282.000000  245.940002  256.390015  280.739990  5.348684e+08   \n",
       "2022-08-01  291.910004  272.380005  277.820007  291.910004  2.121793e+08   \n",
       "2022-08-15  292.679901  290.130005  291.000000  291.105011  6.295264e+06   \n",
       "\n",
       "             Adj Close  \n",
       "Date                    \n",
       "2000-09-01   18.954859  \n",
       "2000-10-01   21.645863  \n",
       "2000-11-01   18.031670  \n",
       "2000-12-01   13.631783  \n",
       "2001-01-01   19.190571  \n",
       "...                ...  \n",
       "2022-05-01  271.238251  \n",
       "2022-06-01  256.829987  \n",
       "2022-07-01  280.739990  \n",
       "2022-08-01  291.910004  \n",
       "2022-08-15  291.105011  \n",
       "\n",
       "[265 rows x 6 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MSFT"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60233157-4f75-4d00-87ce-d58e3e5fac37",
   "metadata": {},
   "source": [
    "1. DEFINE THE VARIABLE OF STUDY. In this case it will be the mean of MSFT cc returns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "50b8df8a-799e-4382-a5a9-c1b63e06a5fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "2000-09-01         NaN\n",
       "2000-10-01    0.141969\n",
       "2000-11-01   -0.166969\n",
       "2000-12-01   -0.244009\n",
       "2001-01-01    0.407781\n",
       "                ...   \n",
       "2022-05-01   -0.020359\n",
       "2022-06-01   -0.055321\n",
       "2022-07-01    0.093097\n",
       "2022-08-01    0.039788\n",
       "2022-08-15   -0.002758\n",
       "Name: R, Length: 265, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MSFT[\"R\"] = (MSFT[\"Close\"] / MSFT[\"Close\"].shift(1)) - 1\n",
    "MSFT[\"R\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d9ed8e0f-928c-4e7b-9cfd-b5fbc1c399d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>R</th>\n",
       "      <th>r</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-10-01</th>\n",
       "      <td>35.062500</td>\n",
       "      <td>24.218750</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>34.437500</td>\n",
       "      <td>2.469416e+09</td>\n",
       "      <td>21.645863</td>\n",
       "      <td>0.141969</td>\n",
       "      <td>0.132754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-11-01</th>\n",
       "      <td>36.187500</td>\n",
       "      <td>28.500000</td>\n",
       "      <td>34.250000</td>\n",
       "      <td>28.687500</td>\n",
       "      <td>1.983463e+09</td>\n",
       "      <td>18.031670</td>\n",
       "      <td>-0.166969</td>\n",
       "      <td>-0.182685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-12-01</th>\n",
       "      <td>30.312500</td>\n",
       "      <td>20.156250</td>\n",
       "      <td>29.031250</td>\n",
       "      <td>21.687500</td>\n",
       "      <td>2.056668e+09</td>\n",
       "      <td>13.631783</td>\n",
       "      <td>-0.244009</td>\n",
       "      <td>-0.279726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001-01-01</th>\n",
       "      <td>32.375000</td>\n",
       "      <td>21.437500</td>\n",
       "      <td>22.062500</td>\n",
       "      <td>30.531250</td>\n",
       "      <td>2.005531e+09</td>\n",
       "      <td>19.190571</td>\n",
       "      <td>0.407781</td>\n",
       "      <td>0.342015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001-02-01</th>\n",
       "      <td>32.531250</td>\n",
       "      <td>26.937500</td>\n",
       "      <td>30.406250</td>\n",
       "      <td>29.500000</td>\n",
       "      <td>1.536896e+09</td>\n",
       "      <td>18.542374</td>\n",
       "      <td>-0.033777</td>\n",
       "      <td>-0.034360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-01</th>\n",
       "      <td>290.880005</td>\n",
       "      <td>246.440002</td>\n",
       "      <td>277.709991</td>\n",
       "      <td>271.869995</td>\n",
       "      <td>7.429020e+08</td>\n",
       "      <td>271.238251</td>\n",
       "      <td>-0.020359</td>\n",
       "      <td>-0.020569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-01</th>\n",
       "      <td>277.690002</td>\n",
       "      <td>241.509995</td>\n",
       "      <td>275.200012</td>\n",
       "      <td>256.829987</td>\n",
       "      <td>6.213723e+08</td>\n",
       "      <td>256.829987</td>\n",
       "      <td>-0.055321</td>\n",
       "      <td>-0.054583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-01</th>\n",
       "      <td>282.000000</td>\n",
       "      <td>245.940002</td>\n",
       "      <td>256.390015</td>\n",
       "      <td>280.739990</td>\n",
       "      <td>5.348684e+08</td>\n",
       "      <td>280.739990</td>\n",
       "      <td>0.093097</td>\n",
       "      <td>0.089015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-01</th>\n",
       "      <td>291.910004</td>\n",
       "      <td>272.380005</td>\n",
       "      <td>277.820007</td>\n",
       "      <td>291.910004</td>\n",
       "      <td>2.121793e+08</td>\n",
       "      <td>291.910004</td>\n",
       "      <td>0.039788</td>\n",
       "      <td>0.039017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-15</th>\n",
       "      <td>292.679901</td>\n",
       "      <td>290.130005</td>\n",
       "      <td>291.000000</td>\n",
       "      <td>291.105011</td>\n",
       "      <td>6.295264e+06</td>\n",
       "      <td>291.105011</td>\n",
       "      <td>-0.002758</td>\n",
       "      <td>-0.002761</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>264 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  High         Low        Open       Close        Volume  \\\n",
       "Date                                                                       \n",
       "2000-10-01   35.062500   24.218750   30.250000   34.437500  2.469416e+09   \n",
       "2000-11-01   36.187500   28.500000   34.250000   28.687500  1.983463e+09   \n",
       "2000-12-01   30.312500   20.156250   29.031250   21.687500  2.056668e+09   \n",
       "2001-01-01   32.375000   21.437500   22.062500   30.531250  2.005531e+09   \n",
       "2001-02-01   32.531250   26.937500   30.406250   29.500000  1.536896e+09   \n",
       "...                ...         ...         ...         ...           ...   \n",
       "2022-05-01  290.880005  246.440002  277.709991  271.869995  7.429020e+08   \n",
       "2022-06-01  277.690002  241.509995  275.200012  256.829987  6.213723e+08   \n",
       "2022-07-01  282.000000  245.940002  256.390015  280.739990  5.348684e+08   \n",
       "2022-08-01  291.910004  272.380005  277.820007  291.910004  2.121793e+08   \n",
       "2022-08-15  292.679901  290.130005  291.000000  291.105011  6.295264e+06   \n",
       "\n",
       "             Adj Close         R         r  \n",
       "Date                                        \n",
       "2000-10-01   21.645863  0.141969  0.132754  \n",
       "2000-11-01   18.031670 -0.166969 -0.182685  \n",
       "2000-12-01   13.631783 -0.244009 -0.279726  \n",
       "2001-01-01   19.190571  0.407781  0.342015  \n",
       "2001-02-01   18.542374 -0.033777 -0.034360  \n",
       "...                ...       ...       ...  \n",
       "2022-05-01  271.238251 -0.020359 -0.020569  \n",
       "2022-06-01  256.829987 -0.055321 -0.054583  \n",
       "2022-07-01  280.739990  0.093097  0.089015  \n",
       "2022-08-01  291.910004  0.039788  0.039017  \n",
       "2022-08-15  291.105011 -0.002758 -0.002761  \n",
       "\n",
       "[264 rows x 8 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MSFT[\"r\"] = np.log(MSFT[\"Adj Close\"]) \\\n",
    "    - np.log(MSFT[\"Adj Close\"].shift(1))\n",
    "MSFTR = MSFT[[\"R\",\"r\"]].copy()\n",
    "MSFT.dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "403cd915-612e-4da0-8970-55052221f13c",
   "metadata": {},
   "source": [
    "2. WRITE THE NULL AND THE ALTERNATIVE HYPOTHESIS.\n",
    "\n",
    "* $H_0$: The mean of monthly cc returns of Microsoft is less than or equal to 0.\n",
    "* $H_a$: The mean of monthly cc returns of Microsoft is greater than 0."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b4e3300-d438-4803-9eab-d84477434d7c",
   "metadata": {},
   "source": [
    "3. CALCULATE THE STANDARD ERROR, WHICH IS THE STANDARD DEVIATION OF THE VARIABLE OF STUDY."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "732aed99-ccf1-479f-9a48-80c8d8e02f41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.004571315492693198"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MONTHS = MSFT[\"r\"].count()\n",
    "msft_std = MSFT[\"r\"].std() / np.sqrt(MONTHS)\n",
    "msft_std"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fee5c402-eaf3-4d2f-a424-68eac27abf88",
   "metadata": {},
   "source": [
    "4. CALCULATE THE t-statistic (t-value). EXPLAIN/INTERPRET THE t-statistic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0242bfa4-d1ff-46b5-9ade-6f8188ce6700",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.2634753028769015"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msft_mu = MSFT[\"r\"].mean()\n",
    "tstat = msft_mu / msft_std\n",
    "tstat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74be745f-a3a1-4e70-977a-232d924b6264",
   "metadata": {},
   "source": [
    "5. CALCULATE THE 95% CONFIDENCE INTERVAL OF THE SAMPLE MEAN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e6e5dcf5-015a-476b-a11e-b8a610d2d42f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.12044287339832115% 1.9489690704756004%\n"
     ]
    }
   ],
   "source": [
    "rmin95 = msft_mu - 2 * msft_std\n",
    "rmax95 = msft_mu + 2 * msft_std\n",
    "\n",
    "f_rmin95 = str(rmin95 * 100) + '%'\n",
    "f_rmax95 = str(rmax95 * 100) + '%'\n",
    "\n",
    "print(f_rmin95, f_rmax95)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a3149b7-acc1-4838-8a14-e28568c584e3",
   "metadata": {},
   "source": [
    "6. WRITE YOUR CONCLUSION OF THE t-TEST\n",
    "\n",
    "Since the mean of monthly cc returns of Microsoft is greater than 0, $H_a$ is true with a confidence interval of 95%."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
